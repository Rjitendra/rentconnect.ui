 private deleteExistingImage(imageId: number, image: UploadedFile) {
    // Here you would call your API to delete the image
    console.log('Deleting existing image with ID:', imageId);

    // TODO: Implement API call to delete image
    this.propertyService.deletePropertyImage(imageId).subscribe({
      next: (response: Result<boolean>) => {
        if (response.success) {
          this.removeImageFromList(image);
          this.alertService.success({
            errors: [
              { message: 'Image deleted successfully', errorType: 'success' },
            ],
          });
        }
      },
      error: () => {
        this.alertService.success({
          errors: [{ message: 'Failed to delete image', errorType: 'error' }],
        });
      },
    });
  }

  private removeImageFromList(image: UploadedFile): void {
    const index = this.uploadedImages.findIndex(
      (img) => img.name === image.name && img.size === image.size,
    );

    if (index >= 0) {
      // Clean up object URL to prevent memory leaks
      if (this.uploadedImages[index].url) {
        URL.revokeObjectURL(this.uploadedImages[index].url);
      }

      // Remove from array
      this.uploadedImages.splice(index, 1);

      // Update form control without triggering validation
      this.propertyForm
        .get('propertyImages')
        ?.setValue(this.uploadedImages, { emitEvent: false });
    }
  }

  // Helper method to get field error message
  getFieldErrorMessage(fieldName: string): string {
    const control = this.propertyForm.get(fieldName);
    if (control && control.errors && control.touched) {
      const errors = control.errors;

      if (errors['required']) {
        return `${this.getFieldDisplayName(fieldName)} is required`;
      }

      if (errors['email']) {
        return 'Please enter a valid email address';
      }

      if (errors['min']) {
        const minError = errors['min'] as { min: number; actual: number };
        return `Minimum value is ${minError.min}`;
      }

      if (errors['max']) {
        const maxError = errors['max'] as { max: number; actual: number };
        return `Maximum value is ${maxError.max}`;
      }

      if (errors['minlength']) {
        const minLenError = errors['minlength'] as {
          requiredLength: number;
          actualLength: number;
        };
        return `Minimum length is ${minLenError.requiredLength}`;
      }

      if (errors['maxlength']) {
        const maxLenError = errors['maxlength'] as {
          requiredLength: number;
          actualLength: number;
        };
        return `Maximum length is ${maxLenError.requiredLength}`;
      }

      if (errors['pattern']) {
        return 'Invalid format';
      }
    }
    return '';
  } private getPropertyImages(landlordId: number, propertyId: number) {
    this.propertyService
      .getPropertyImagesUrl(landlordId, propertyId)
      .subscribe((res: Result<IDocument[]>) => {
        this.propertiesImages = res.entity;
        const prop = this.property();
        if (prop) {
          prop.documents = this.propertiesImages;
        }
        this.populateFormForEdit();
      });
  }
}